<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>豆花君</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://douhuajun.github.io/"/>
  <updated>2017-02-08T13:26:04.598Z</updated>
  <id>http://douhuajun.github.io/</id>
  
  <author>
    <name>豆花君</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《深入理解Java虚拟机 2nd》学习笔记(一) · 走近Java</title>
    <link href="http://douhuajun.github.io/2017/02/08/JVM1/"/>
    <id>http://douhuajun.github.io/2017/02/08/JVM1/</id>
    <published>2017-02-08T10:46:07.000Z</published>
    <updated>2017-02-08T13:26:04.598Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h3 id="Java技术体系"><a href="#Java技术体系" class="headerlink" title="Java技术体系"></a>Java技术体系</h3><p>传统意义上，Sun官方所定义的Java技术体系包括：<br>　　1.API类库中的Java Java程序设计语言<br>　　2.API类库中的Java  各种硬件平台上的Java虚拟机<br>　　3.Class文件格式<br>　　4.Java API类库<br>　　5.来自商业机构和开源社区的第三方Java类库</p>
<p><strong>JDK(Java Development Kit)：</strong><br>　　Java程序设计语言、Java虚拟机、JavaAPI类库这三部分的统称，是用于支持Java程序开发的最小环境。</p>
<p><strong>JRE(Java Runtime Environment)：</strong><br>　　API类库中的Java SE API子集和Java虚拟机，是支持Java程序运行的标准环境。</p>
<center><img src="/img/arcPic/illustrations/JDK.jpg" width="800px;" height="520px;"></center>

<p>Java技术体系可以分为4个平台，分别为：<br>　　<strong>1.Java Card：</strong>支持一些Java小程序(Applets)运行在小内存设备(如智能卡)上的平台。<br>　　<strong>2.Java ME(Micro Edition)：</strong>支持Java程序运行在移动终端(手机、PDA)上的平台，对Java API有所精简，并加入了<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;针对移动终端的支持，这个版本以前称为J2ME。<br>　　<strong>3.Java SE(Standard Edition)：</strong>支持面向桌面级应用（如Windows下的应用程序）的Java平台，提供了完整的Java<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;核心API，这个版本以前称为J2SE。<br>　　<strong>4.Java EE(Enterprise Edition)：</strong>支持使用多层架构的企业应用(如ERP、CRM应用)的Java平台，除了提供Java SE<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;API外，还对其做了大量的扩充。<br><br></p>
<h3 id="Java发展史"><a href="#Java发展史" class="headerlink" title="Java发展史"></a>Java发展史</h3><center><img src="/img/arcPic/illustrations/JVMHis.jpg" width="800px;" height="200px;"></center>

<!-- 1996年1月23日，JDK 1.0发布，Java语言有了第一个正式版本的运行环境。JDK 1.0提供了一个纯解释执行的Java虚拟机实现(Sun Classic VM)。代表技术包括：Java虚拟机、Applet、AWT等。

1997年2月19日，Sun公司发布了JDK 1.1，代表技术包括：JAR文件格式、JDBC、JavaBeans、RMI。Java语法也有了一定的发展，如内部类(Inner Class)和反射(Reflection)都是在这个时候出现的。

到1999年4月8日，JDK 1.1一共发布了1.1.0～1.1.8九个版本。

1998年12月4日，JDK 1.2发布，Sun在这个版本中把Java技术体系拆分为3个方向。代表性技术有：EJB、Java Plug-in、Java IDL、Swing等，并且这个版本中Java虚拟机第一次内置了JIT(Just In Time)编译器(JDK 1.2中曾并存过3个虚拟机，ClassicVM、HotSpot VM和Exact VM，其中Exact VM只在Solaris平台出现过；后面两个虚拟机都是内置JIT编译器的，而之前版本所带的Classic VM只能以外挂的形式使用JIT编译器)。在语言和API级别上，Java添加了strictfp关键字与现在Java编码之中极为常用的一系列Collections集合类。

1999年3月和7月，分别有JDK 1.2.1和JDK 1.2.2两个小版本发布。

1999年4月27日，HotSpot虚拟机发布，后来它成为了JDK 1.3及之后所有版本的Sun JDK的默认虚拟机。

2000年5月8日，JDK 1.3发布，改进主要表现在一些类库上（如数学运算和新的Timer API等），JNDI服务从JDK 1.3开始
被作为一项平台级服务提供（以前JNDI仅仅是一项扩展），使用CORBA IIOP来实现RMI的通信协议，等等。这个版本还对Java 2D做了很多改进，提供了大量新的Java 2D API，并且新添加了JavaSound类库。

自从JDK 1.3开始，Sun维持了一个习惯：大约每隔两年发布一个JDK的主版本，以动物命名，期间发布的各个修正版本则以昆虫作为工程名称。

2002年2月13日，JDK 1.4发布，是Java真正走向成熟的一个版本，新的技术特性有：正则表达式、异常链、NIO、日志类、XML解析器和XSLT转换器等。

2002年前后还发生了一件与Java没有直接关系，但事实上对Java的发展进程影响很大的事件，那就是微软公司的.NET Framework发布了。

2004年9月30日，JDK 1.5发布，在Java语法易用性上做出了非常大的改进。例如，自动装箱、泛型、动态注解、枚举、
可变长参数、遍历循环（foreach循环）等。在虚拟机和API层面上，这个版本改进了Java的内存模型（Java Memory
Model,JMM）、提供了java.util.concurrent并发包等。

2006年12月11日，JDK 1.6发布，在这个版本中，Sun终结了从JDK 1.2开始已经有8年历史的J2EE、J2SE、J2ME的命名方式，启用Java SE 6、Java EE6、Java ME 6的命名方式。改进包括：提供动态语言支持（通过内置Mozilla JavaScript-Rhino引擎实现）、提供编译API和微型HTTP服务器API等。同时，这个版本对Java虚拟机内部做了大量改进，包括锁与同步、垃圾收集、类加载等方面的算法都有相当多的改动。

2009年2月19日，JDK 1.7完成了其第一个里程碑版本。在JDK1.7开发期间，Sun公司由于相继在技术竞争和商业竞争中都陷入泥潭,已无力推动JDK 1.7的研发工作按正常计划进行。Oracle公司收购Sun公司后不久便宣布将实行“B计划”，最终，JDK 1.7的主要改进包括：提供新的G1收集器（G1在发布时依然处于Experimental状态，直至2012年4月的Update4中才正式“转正”）、加强对非Java语言的调用支持（JSR-292，这项特性到目前为止依然没有完全实现定型）、升级类加载架构等。

从Java SE 7 Update 4起，Oracle开始支持Mac OS X操作系统，并在Update 6中达到完全支持的程度，同时，在Update 6中还对ARM指令集架构提供了支持。至此，官方提供的JDK可以运行于Windows（不含Windows 9x）、Linux、Solaris和Mac OS平台上，支持ARM、x86、x64和Sparc指令集架构类型。

2009年4月20日，Oracle公司宣布正式以74亿美元的价格收购Sun公司，Java商标从此正式归Oracle所有(Java语言本身并不属于哪间公司所有，它由JCP组织进行管理，尽管JCP主要是由Sun公司或者说Oracle公司所领导的)。 -->
<p>注：JDK从1.5版本开始，官方在正式文档与宣传上已经不再使用类似JDK 1.5的命名，只有在程序员内部使用的开发版本号(Developer Version，例如java-version的输出)中才继续沿用1.5、1.6、1.7的版本号，而公开版本号(Product Version)<br>则改为JDK 5、JDK 6、JDK 7的命名方式。</p>
<p><strong>Java 8新特性：</strong><br>　　<strong>1.Java语言的新特性： </strong>Lambda表达式与Functional接口， 接口的默认方法与静态方法，方法引用，重复注解，更好 　　的类型推测机制，扩展注解的支持<br>　　<strong>2.Java编译器的新特性：</strong>参数名字<br>　　<strong>3.Java类库的新特性：</strong>Optional，Stream(java.util.stream)，Date/Time API (JSR 310)，JavaScript引擎Nashorn， 　　Base64， 并行（parallel）数组，并发(Concurrency)<br>　　<strong>4.新的Java工具： </strong>Nashorn引擎: jjs，类依赖分析器jdeps<br>　　<strong>5.Java虚拟机(JVM)的新特性：</strong>PermGen空间被移除了，取而代之的是Metaspace(JEP 122)。<br>参考：<a href="http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html" target="_blank" rel="external">What’s New in JDK 8</a><br><br></p>
<h3 id="Java虚拟机发展简史"><a href="#Java虚拟机发展简史" class="headerlink" title="Java虚拟机发展简史"></a>Java虚拟机发展简史</h3><p>　　1.Sun Classic/Exact VM<br>　　2.Sun HotSpot VM<br>　　3.Sun Mobile-Embedded VM/Meta-Circular VM<br>　　4.BEA JRockit/IBM J9 VM<br>　　5.Azul VM/BEA Liquid VM<br>　　6.Apache Harmony/Google Android Dalvik VM<br>　　7.Microsoft JVM及其他</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;Java技术体系&quot;&gt;&lt;a href=&quot;#Java技术体系&quot; cl
    
    </summary>
    
      <category term="Java" scheme="http://douhuajun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://douhuajun.github.io/tags/Java/"/>
    
      <category term="JVM" scheme="http://douhuajun.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Hello World！</title>
    <link href="http://douhuajun.github.io/2017/02/07/hello-world/"/>
    <id>http://douhuajun.github.io/2017/02/07/hello-world/</id>
    <published>2017-02-07T09:00:00.000Z</published>
    <updated>2017-02-08T10:44:54.896Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/APlayer.min.js"> </script><script src="/assets/js/DPlayer.min.js"> </script><p>最开始是查资料，发现了某一博客。。。</p>
<p>然后感觉真心不错，自己也想弄一个，随便写点东西。。。</p>
<p>接着花了几天时间，了解Git, Github Pages, Hexo，看了各种各样的主题，发现了<br>越来越多好看的博客，顺带进行参(抄)考(袭)(捂脸)，最后搭建完这个小站。。。</p>
<p>最纠结的地方在于要选好多图片，然后各种不搭(打脸，文章内容才是重点)。。。</p>
<p>感觉好多地方有bug，还有关于域名、空间托管之类的，以后再说。。。</p>
<p>希望在这个小空间会有点收获。。。</p>
<p>谨此。<br><br><br>参考：<a href="https://vinoit.me" target="_blank" rel="external">vinoit.me</a>，<a href="https://login926.top" target="_blank" rel="external">login926.top</a>，<a href="http://licu100.com" target="_blank" rel="external">licu100.com</a>，<a href="https://halyul.com" target="_blank" rel="external">halyul.com</a></p>
<p>推荐一个图片网站，本站部分图片来源于此：<a href="https://unsplash.com" target="_blank" rel="external">Unsplash</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;最开始是查资料，发现了某一博客。。。&lt;/p&gt;
&lt;p&gt;然后感觉真心不错，自己
    
    </summary>
    
      <category term="Hexo" scheme="http://douhuajun.github.io/categories/Hexo/"/>
    
    
      <category term="Hello World" scheme="http://douhuajun.github.io/tags/Hello-World/"/>
    
  </entry>
  
</feed>
