<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>豆花君</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://douhuajun.github.io/"/>
  <updated>2017-02-09T06:48:21.855Z</updated>
  <id>http://douhuajun.github.io/</id>
  
  <author>
    <name>豆花君</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《深入理解Java虚拟机 2nd》学习笔记(三) · Updating</title>
    <link href="http://douhuajun.github.io/2017/02/09/JVM3/"/>
    <id>http://douhuajun.github.io/2017/02/09/JVM3/</id>
    <published>2017-02-09T03:00:00.000Z</published>
    <updated>2017-02-09T06:48:21.855Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p><strong>后面几节的也大略看了点，真心看不懂。。。果然要有一定水平。。。因此决定暂停阅读本书。。。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;&lt;strong&gt;后面几节的也大略看了点，真心看不懂。。。果然要有一定水平。
    
    </summary>
    
      <category term="Java" scheme="http://douhuajun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://douhuajun.github.io/tags/Java/"/>
    
      <category term="JVM" scheme="http://douhuajun.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>《深入理解Java虚拟机 2nd》学习笔记(二) · Java内存区域</title>
    <link href="http://douhuajun.github.io/2017/02/08/JVM2/"/>
    <id>http://douhuajun.github.io/2017/02/08/JVM2/</id>
    <published>2017-02-08T14:29:54.000Z</published>
    <updated>2017-02-09T05:51:43.958Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h3 id="运行时数据区域"><a href="#运行时数据区域" class="headerlink" title="运行时数据区域"></a><strong>运行时数据区域</strong></h3><p> Java 虚拟机在执行 Java 程序的过程中会把它所管理的内存划分为若干个不同的数据区域。这些区域都有各自的用途，以及创建和销毁的时间，有的区域随着虚拟机进程的启动而存在，有些区域则依赖用户线程的启动和结束而建立和销毁。</p>
<p><strong>Java 虚拟机运行时数据区：</strong></p>
<center><img src="/img/arcPic/illustrations/DataArea.jpg" width="500px;" height="420px;"></center>

<h4 id="1-程序计数器-Program-Counter-Register"><a href="#1-程序计数器-Program-Counter-Register" class="headerlink" title="1.程序计数器 (Program Counter Register)"></a>1.程序计数器 (Program Counter Register)</h4><p>　　程序计数器是一块较小的内存空间，它可以看作是当前线程所执行的字节码的行号指示器。在虚拟机的概念模型里（仅是概念模型，各种虚拟机可能会通过一些更高效的方式去实现），字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、跳转、异常处理、线程恢复等基础功能都需要依赖这个计数器来完成。<br>　　由于 Java 虚拟机的多线程是通过线程轮流切换并分配处理器执行时间的方式来实现的，在任何一个确定的时刻，一个处理器（对于多核处理器来说是一个内核）都只会执行一条线程中的指令。因此，为了线程切换后能恢复到正确的执行位置，每条线程都需要有一个独立的程序计数器，各条线程之间计数器互不影响，独立存储，我们称这类内存区域为“线程私有”的内存。<br>　　如果线程正在执行的是一个Java方法，这个计数器记录的是正在执行的虚拟机字节码指令的地址；如果正在执行的是Native方法，这个计数器值则为空 (Undefined)。此内存区域是唯一一个在Java虚拟机规范中没有规定任何 OutOfMe-moryError 情况的区域。</p>
<h4 id="2-Java-虚拟机栈-Java-Virtual-Machine-Stacks"><a href="#2-Java-虚拟机栈-Java-Virtual-Machine-Stacks" class="headerlink" title="2.Java 虚拟机栈 (Java Virtual Machine Stacks)"></a>2.Java 虚拟机栈 (Java Virtual Machine Stacks)</h4><p>　　与程序计数器一样，Java 虚拟机栈也是线程私有的，它的生命周期与线程相同。虚拟机栈描述的是 Java 方法执行的内存模型：每个方法在执行的同时都会创建一个栈帧 (Stack Frame) 用于存储局部变量表、操作数栈、动态链接、方法出口等信息。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。<br>　　经常有人把Java内存区分为堆内存 (Heap) 和栈内存 (Stack)，这种分法比较粗糙，Java 内存区域的划分实际上远比这复杂。这种划分方式的流行只能说明大多数程序员最关注的、与对象内存分配关系最密切的内存区域是这两块。其中所指的“堆”笔者在后面会专门讲述，而所指的“栈”就是现在讲的虚拟机栈，或者说是虚拟机栈中局部变量表部分。局部变量表存放了编译期可知的各种基本数据类型( boolean、byte、char、short、int、float、long、double )、对象引用 （reference 类型，它不等同于对象本身，可能是一个指向对象起始地址的引用指针，也可能是指向一个代表对象的句柄或其他与此对象相关的位置）和returnAddress类型（指向了一条字节码指令的地址）。<br>　　其中64位长度的 long 和 double 类型的数据会占用2个局部变量空间 (Slot)，其余的数据类型只占用1个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在帧中分配多大的局部变量空间是完全确定的，在方法运行期间不会改变局部变量表的大小。<br>　　在 Java 虚拟机规范中，对这个区域规定了两种异常状况：如果线程请求的栈深度大于虚拟机所允许的深度，将抛出 StackOverflowError 异常；如果虚拟机栈可以动态扩展(当前大部分的 Java 虚拟机都可动态扩展，只不过 Java 虚拟机规范中也允许固定长度的虚拟机栈)，如果扩展时无法申请到足够的内存，就会抛出 OutOfMemoryError 异常。</p>
<h4 id="3-本地方法栈-Native-Method-Stack"><a href="#3-本地方法栈-Native-Method-Stack" class="headerlink" title="3.本地方法栈 (Native Method Stack)"></a>3.本地方法栈 (Native Method Stack)</h4><p>　　本地方法栈与虚拟机栈所发挥的作用是非常相似的，它们之间的区别不过是虚拟机栈为虚拟机执行 Java 方法（也就是字节码）服务，而本地方法栈则为虚拟机使用到的 Native 方法服务。在虚拟机规范中对本地方法栈中方法使用的语言、使用方式与数据结构并没有强制规定，因此具体的虚拟机可以自由实现它。甚至有的虚拟机（譬如 Sun HotSpot 虚拟机）直接就把本地方法栈和虚拟机栈合二为一。与虚拟机栈一样，本地方法栈区域也会抛出 StackOverflowError 和 OutOfMemoryError 异常。</p>
<h4 id="4-Java-堆-Java-Heap"><a href="#4-Java-堆-Java-Heap" class="headerlink" title="4.Java 堆 (Java Heap)"></a>4.Java 堆 (Java Heap)</h4><p>　　对于大多数应用来说，Java 堆是Java虚拟机所管理的内存中最大的一块。Java 堆是被所有线程共享的一块内存区域，在虚拟机启动时创建。此内存区域的唯一目的就是存放对象实例，几乎所有的对象实例都在这里分配内存。这一点在Java虚拟机规范中的描述是：所有的对象实例以及数组都要在堆上分配，但是随着JIT编译器的发展与逃逸分析技术逐渐成熟，栈上分配、标量替换优化技术将会导致一些微妙的变化发生，所有的对象都分配在堆上也渐渐变得不是那么“绝对”了。<br>　　Java 堆是垃圾收集器管理的主要区域，因此很多时候也被称做“GC 堆”（GarbageCollected Heap，幸好国内没翻译成“垃圾堆”）。从内存回收的角度来看，由于现在收集器基本都采用分代收集算法，所以Java堆中还可以细分为：新生代和老年代；再细致一点的有 Eden 空间、From Survivor 空间、To Survivor空间等。从内存分配的角度来看，线程共享的Java堆中可能划分出多个线程私有的分配缓冲区（Thread Local Allocation Buffer,TLAB）。不过无论如何划分，都与存放内容无关，无论哪个区域，存储的都仍然是对象实例，进一步划分的目的是为了更好地回收内存，或者更快地分配内存。<br>　　根据 Java 虚拟机规范的规定，Java堆可以处于物理上不连续的内存空间中，只要逻辑上是连续的即可，就像我们的磁盘空间一样。在实现时，既可以实现成固定大小的，也可以是可扩展的，不过当前主流的虚拟机都是按照可扩展来实现的（通过 -Xmx 和 -Xms 控制）。如果在堆中没有内存完成实例分配，并且堆也无法再扩展时，将会抛出 OutOfMemory-Error 异常。</p>
<h4 id="5-方法区-Method-Area"><a href="#5-方法区-Method-Area" class="headerlink" title="5.方法区 (Method Area)"></a>5.方法区 (Method Area)</h4><p>　　方法区（Method Area）与 Java 堆一样，是各个线程共享的内存区域，它用于存储已被虚拟机加载的类信息、常量、静态变量、即时编译器编译后的代码等数据。虽然 Java 虚拟机规范把方法区描述为堆的一个逻辑部分，但是它却有一个别名叫做 Non-Heap（非堆），目的应该是与 Java 堆区分开来。<br>　　对于习惯在 HotSpot 虚拟机上开发、部署程序的开发者来说，很多人都更愿意把方法区称为“永久代”（Permanent Generation），本质上两者并不等价，仅仅是因为HotSpot虚拟机的设计团队选择把 GC 分代收集扩展至方法区，或者说使用永久代来实现方法区而已，这样HotSpot的垃圾收集器可以像管理Java堆一样管理这部分内存，能够省去专门为方法区编写内存管理代码的工作。对于其他虚拟机（如 BEA JRockit、IBM J9 等）来说是不存在永久代的概念的。原则上，如何实现方法区属于虚拟机实现细节，不受虚拟机规范约束，但使用永久代来实现方法区，现在看来并不是一个好主意，因为这样更容易遇到内存溢出问题（永久代有 -XX：MaxPermSize 的上限，J9 和 JRockit 只要没有触碰到进程可用内存的上限，例如32位系统中的4GB，就不会出现问题），而且有极少数方法（例如String.intern()）会因这个原因导致不同虚拟机下有不同的表现。因此，对于 HotSpot 虚拟机，根据官方发布的路线图信息，现在也有放弃永久代并逐步改为采用 Native Memory 来实现方法区的规划了，在目前已经发布的 JDK 1.7的 HotSpot 中，已经把原本放在永久代的字符串常量池移出。<br>　　Java 虚拟机规范对方法区的限制非常宽松，除了和 Java 堆一样不需要连续的内存和可以选择固定大小或者可扩展外，还可以选择不实现垃圾收集。相对而言，垃圾收集行为在这个区域是比较少出现的，但并非数据进入了方法区就如永久代的名字一样“永久”存在了。这区域的内存回收目标主要是针对常量池的回收和对类型的卸载，一般来说，这个区域的回收“成绩”比较难以令人满意，尤其是类型的卸载，条件相当苛刻，但是这部分区域的回收确实是必要的。在 Sun 公司 的 BUG 列表中，曾出现过的若干个严重的BUG就是由于低版本的 HotSpot 虚拟机对此区域未完全回收而导致内存泄漏。根据 Java 虚拟机规范的规定，当方法区无法满足内存分配需求时，将抛出 OutOfMemoryError 异常。</p>
<h4 id="6-运行时常量池-Runtime-Constant-Pool"><a href="#6-运行时常量池-Runtime-Constant-Pool" class="headerlink" title="6.运行时常量池 (Runtime Constant Pool)"></a>6.运行时常量池 (Runtime Constant Pool)</h4><p>　　运行时常量池（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后进入方法区的运行时常量池中存放。<br>　　Java 虚拟机对 Class 文件每一部分（自然也包括常量池）的格式都有严格规定，每一个字节用于存储哪种数据都必须符合规范上的要求才会被虚拟机认可、装载和执行，但对于运行时常量池，Java 虚拟机规范没有做任何细节的要求，不同的提供商实现的虚拟机可以按照自己的需要来实现这个内存区域。不过，一般来说，除了保存 Class 文件中描述的符号引用外，还会把翻译出来的直接引用也存储在运行时常量池中。<br>　　运行时常量池相对于 Class 文件常量池的另外一个重要特征是具备动态性，Java语言并不要求常量一定只有编译期才能产生，也就是并非预置入 Class 文件中常量池的内容才能进入方法区运行时常量池，运行期间也可能将新的常量放入池中，这种特性被开发人员利用得比较多的便是 String 类的 intern() 方法。<br>　　既然运行时常量池是方法区的一部分，自然受到方法区内存的限制，当常量池无法再申请到内存时会抛出 OutOfMe-moryError 异常。</p>
<h4 id="7-直接内存-Direct-Memory"><a href="#7-直接内存-Direct-Memory" class="headerlink" title="7.直接内存 (Direct Memory)"></a>7.直接内存 (Direct Memory)</h4><p>　　直接内存（Direct Memory）并不是虚拟机运行时数据区的一部分，也不是 Java 虚拟机规范中定义的内存区域。但是这部分内存也被频繁地使用，而且也可能导致 OutOfMemoryError 异常出现，所以我们放到这里一起讲解。<br>　　在 JDK 1.4中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用 Native 函数库直接分配堆外内存，然后通过一个存储在 Java 堆中的 DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在 Java 堆和 Native 堆中来回复制数据。<br>　　显然，本机直接内存的分配不会受到 Java 堆大小的限制，但是，既然是内存，肯定还是会受到本机总内存（包括 RAM 以及 SWAP 区或者分页文件）大小以及处理器寻址空间的限制。服务器管理员在配置虚拟机参数时，会根据实际内存设置-Xmx等参数信息，但经常忽略直接内存，使得各个内存区域总和大于物理内存限制（包括物理的和操作系统级的限制），从而导致动态扩展时出现 OutOfMemoryError 异常。</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;运行时数据区域&quot;&gt;&lt;a href=&quot;#运行时数据区域&quot; clas
    
    </summary>
    
      <category term="Java" scheme="http://douhuajun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://douhuajun.github.io/tags/Java/"/>
    
      <category term="JVM" scheme="http://douhuajun.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>《深入理解Java虚拟机 2nd》学习笔记(一) · 走近Java</title>
    <link href="http://douhuajun.github.io/2017/02/08/JVM1/"/>
    <id>http://douhuajun.github.io/2017/02/08/JVM1/</id>
    <published>2017-02-08T10:46:07.000Z</published>
    <updated>2017-02-09T05:22:41.446Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><h3 id="Java-技术体系"><a href="#Java-技术体系" class="headerlink" title="Java 技术体系"></a><strong>Java 技术体系</strong></h3><p>传统意义上，Sun 官方所定义的 Java 技术体系包括：<br>　　1.Java 程序设计语言<br>　　2.各种硬件平台上的 Java 虚拟机<br>　　3.Class 文件格式<br>　　4.Java API类库<br>　　5.来自商业机构和开源社区的第三方Java类库</p>
<p><strong>JDK(Java Development Kit)：</strong><br>　　Java 程序设计语言、Java 虚拟机、Java API 类库这三部分的统称，是用于支持 Java 程序开发的最小环境。</p>
<p><strong>JRE(Java Runtime Environment)：</strong><br>　　API 类库中的 Java SE API 子集和 Java 虚拟机，是支持 Java 程序运行的标准环境。</p>
<center><img src="/img/arcPic/illustrations/JDK.jpg" width="800px;" height="520px;"></center>

<p>Java 技术体系可以分为4个平台，分别为：<br>　　<strong>1.Java Card：</strong>支持一些 Java 小程序(Applets)运行在小内存设备(如智能卡)上的平台。<br>　　<strong>2.Java ME(Micro Edition)：</strong>支持Java程序运行在移动终端(手机、PDA)上的平台，对Java API有所精简，并加入了<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;针对移动终端的支持，这个版本以前称为 J2ME。<br>　　<strong>3.Java SE(Standard Edition)：</strong>支持面向桌面级应用（如 Windows 下的应用程序）的Java平台，提供了完整的Java<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;核心API，这个版本以前称为J2SE。<br>　　<strong>4.Java EE(Enterprise Edition)：</strong>支持使用多层架构的企业应用(如 ERP、CRM 应用)的Java平台，除了提供 Java SE<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;API 外，还对其做了大量的扩充。<br><br></p>
<h3 id="Java-发展史"><a href="#Java-发展史" class="headerlink" title="Java 发展史"></a>Java 发展史</h3><center><img src="/img/arcPic/illustrations/JVMHis.jpg" width="800px;" height="200px;"></center>

<!-- 1996年1月23日，JDK 1.0发布，Java语言有了第一个正式版本的运行环境。JDK 1.0提供了一个纯解释执行的Java虚拟机实现(Sun Classic VM)。代表技术包括：Java虚拟机、Applet、AWT等。

1997年2月19日，Sun公司发布了JDK 1.1，代表技术包括：JAR文件格式、JDBC、JavaBeans、RMI。Java语法也有了一定的发展，如内部类(Inner Class)和反射(Reflection)都是在这个时候出现的。

到1999年4月8日，JDK 1.1一共发布了1.1.0～1.1.8九个版本。

1998年12月4日，JDK 1.2发布，Sun在这个版本中把Java技术体系拆分为3个方向。代表性技术有：EJB、Java Plug-in、Java IDL、Swing等，并且这个版本中Java虚拟机第一次内置了JIT(Just In Time)编译器(JDK 1.2中曾并存过3个虚拟机，ClassicVM、HotSpot VM和Exact VM，其中Exact VM只在Solaris平台出现过；后面两个虚拟机都是内置JIT编译器的，而之前版本所带的Classic VM只能以外挂的形式使用JIT编译器)。在语言和API级别上，Java添加了strictfp关键字与现在Java编码之中极为常用的一系列Collections集合类。

1999年3月和7月，分别有JDK 1.2.1和JDK 1.2.2两个小版本发布。

1999年4月27日，HotSpot虚拟机发布，后来它成为了JDK 1.3及之后所有版本的Sun JDK的默认虚拟机。

2000年5月8日，JDK 1.3发布，改进主要表现在一些类库上（如数学运算和新的Timer API等），JNDI服务从JDK 1.3开始
被作为一项平台级服务提供（以前JNDI仅仅是一项扩展），使用CORBA IIOP来实现RMI的通信协议，等等。这个版本还对Java 2D做了很多改进，提供了大量新的Java 2D API，并且新添加了JavaSound类库。

自从JDK 1.3开始，Sun维持了一个习惯：大约每隔两年发布一个JDK的主版本，以动物命名，期间发布的各个修正版本则以昆虫作为工程名称。

2002年2月13日，JDK 1.4发布，是Java真正走向成熟的一个版本，新的技术特性有：正则表达式、异常链、NIO、日志类、XML解析器和XSLT转换器等。

2002年前后还发生了一件与Java没有直接关系，但事实上对Java的发展进程影响很大的事件，那就是微软公司的.NET Framework发布了。

2004年9月30日，JDK 1.5发布，在Java语法易用性上做出了非常大的改进。例如，自动装箱、泛型、动态注解、枚举、
可变长参数、遍历循环（foreach循环）等。在虚拟机和API层面上，这个版本改进了Java的内存模型（Java Memory
Model,JMM）、提供了java.util.concurrent并发包等。

2006年12月11日，JDK 1.6发布，在这个版本中，Sun终结了从JDK 1.2开始已经有8年历史的J2EE、J2SE、J2ME的命名方式，启用Java SE 6、Java EE6、Java ME 6的命名方式。改进包括：提供动态语言支持（通过内置Mozilla JavaScript-Rhino引擎实现）、提供编译API和微型HTTP服务器API等。同时，这个版本对Java虚拟机内部做了大量改进，包括锁与同步、垃圾收集、类加载等方面的算法都有相当多的改动。

2009年2月19日，JDK 1.7完成了其第一个里程碑版本。在JDK1.7开发期间，Sun公司由于相继在技术竞争和商业竞争中都陷入泥潭,已无力推动JDK 1.7的研发工作按正常计划进行。Oracle公司收购Sun公司后不久便宣布将实行“B计划”，最终，JDK 1.7的主要改进包括：提供新的G1收集器（G1在发布时依然处于Experimental状态，直至2012年4月的Update4中才正式“转正”）、加强对非Java语言的调用支持（JSR-292，这项特性到目前为止依然没有完全实现定型）、升级类加载架构等。

从Java SE 7 Update 4起，Oracle开始支持Mac OS X操作系统，并在Update 6中达到完全支持的程度，同时，在Update 6中还对ARM指令集架构提供了支持。至此，官方提供的JDK可以运行于Windows（不含Windows 9x）、Linux、Solaris和Mac OS平台上，支持ARM、x86、x64和Sparc指令集架构类型。

2009年4月20日，Oracle公司宣布正式以74亿美元的价格收购Sun公司，Java商标从此正式归Oracle所有(Java语言本身并不属于哪间公司所有，它由JCP组织进行管理，尽管JCP主要是由Sun公司或者说Oracle公司所领导的)。 -->
<p>注：JDK 从1.5版本开始，官方在正式文档与宣传上已经不再使用类似 JDK 1.5的命名，只有在程序员内部使用的开发版本号（Developer Version，例如 java-version 的输出）中才继续沿用1.5、1.6、1.7的版本号，而公开版本号 (Product Version)<br>则改为JDK 5、JDK 6、JDK 7的命名方式。</p>
<p><strong>Java 8新特性：</strong><br>　　<strong>1.Java 语言的新特性： </strong>Lambda 表达式与Functional接口， 接口的默认方法与静态方法，方法引用，重复注解，更  　　好的类型推测机制，扩展注解的支持<br>　　<strong>2.Java 编译器的新特性：</strong>参数名字<br>　　<strong>3.Java 类库的新特性：</strong>Optional，Stream(java.util.stream)，Date/Time API (JSR 310)，JavaScript引擎Nashorn， 　　Base64， 并行 (parallel) 数组，并发(Concurrency)<br>　　<strong>4.新的 Java 工具： </strong>Nashorn 引擎: jjs，类依赖分析器 jdeps<br>　　<strong>5.Java 虚拟机 (JVM) 的新特性：</strong>PermGen空间被移除了，取而代之的是 Metaspace(JEP 122)。<br>参考：<a href="http://www.oracle.com/technetwork/java/javase/8-whats-new-2157071.html" target="_blank" rel="external">What’s New in JDK 8</a><br><br></p>
<h3 id="Java-虚拟机发展简史"><a href="#Java-虚拟机发展简史" class="headerlink" title="Java 虚拟机发展简史"></a>Java 虚拟机发展简史</h3><p>　　1.Sun Classic/Exact VM<br>　　2.Sun HotSpot VM<br>　　3.Sun Mobile-Embedded VM/Meta-Circular VM<br>　　4.BEA JRockit/IBM J9 VM<br>　　5.Azul VM/BEA Liquid VM<br>　　6.Apache Harmony/Google Android Dalvik VM<br>　　7.Microsoft JVM及其他</p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;h3 id=&quot;Java-技术体系&quot;&gt;&lt;a href=&quot;#Java-技术体系&quot; 
    
    </summary>
    
      <category term="Java" scheme="http://douhuajun.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://douhuajun.github.io/tags/Java/"/>
    
      <category term="JVM" scheme="http://douhuajun.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Hello World！</title>
    <link href="http://douhuajun.github.io/2017/02/07/hello-world/"/>
    <id>http://douhuajun.github.io/2017/02/07/hello-world/</id>
    <published>2017-02-07T09:00:00.000Z</published>
    <updated>2017-02-08T10:44:54.896Z</updated>
    
    <content type="html"><![CDATA[<script src="/assets/js/DPlayer.min.js"> </script><script src="/assets/js/APlayer.min.js"> </script><p>最开始是查资料，发现了某一博客。。。</p>
<p>然后感觉真心不错，自己也想弄一个，随便写点东西。。。</p>
<p>接着花了几天时间，了解Git, Github Pages, Hexo，看了各种各样的主题，发现了<br>越来越多好看的博客，顺带进行参(抄)考(袭)(捂脸)，最后搭建完这个小站。。。</p>
<p>最纠结的地方在于要选好多图片，然后各种不搭(打脸，文章内容才是重点)。。。</p>
<p>感觉好多地方有bug，还有关于域名、空间托管之类的，以后再说。。。</p>
<p>希望在这个小空间会有点收获。。。</p>
<p>谨此。<br><br><br>参考：<a href="https://vinoit.me" target="_blank" rel="external">vinoit.me</a>，<a href="https://login926.top" target="_blank" rel="external">login926.top</a>，<a href="http://licu100.com" target="_blank" rel="external">licu100.com</a>，<a href="https://halyul.com" target="_blank" rel="external">halyul.com</a></p>
<p>推荐一个图片网站，本站部分图片来源于此：<a href="https://unsplash.com" target="_blank" rel="external">Unsplash</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;script src=&quot;/assets/js/DPlayer.min.js&quot;&gt; &lt;/script&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;&gt; &lt;/script&gt;&lt;p&gt;最开始是查资料，发现了某一博客。。。&lt;/p&gt;
&lt;p&gt;然后感觉真心不错，自己
    
    </summary>
    
      <category term="Hexo" scheme="http://douhuajun.github.io/categories/Hexo/"/>
    
    
      <category term="Hello World" scheme="http://douhuajun.github.io/tags/Hello-World/"/>
    
  </entry>
  
</feed>
